import can
import csv
import time
import os
import json
from datetime import datetime

CONFIG_FILE = "shared_config.json"
TERMINATE_FILE = "terminate_logger.flag"
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

def load_config():
    with open(CONFIG_FILE, "r") as f:
        return json.load(f)

def create_log_filename(channel_index):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return os.path.join(LOG_DIR, f"log_ch{channel_index}_{timestamp}.csv")

def log_messages(channel_index, config):
    bitrate = config["bitrate"][str(channel_index)]
    control_id = config["control_frame_id"]
    control_data = bytes(config["control_frame_data"])

    log_file = create_log_filename(channel_index)
    print(f"[Logger] Logging on channel {channel_index} â†’ {log_file}")
    bus = can.Bus(interface='vector', channel=channel_index, bitrate=bitrate)

    with open(log_file, mode='w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["Timestamp", "ID", "Data"])

        while True:
            if os.path.exists(TERMINATE_FILE):
                print("[Logger] Termination file detected. Exiting.")
                bus.shutdown()
                return

            msg = bus.recv(1.0)
            if msg is None:
                continue

            writer.writerow([msg.timestamp, hex(msg.arbitration_id), msg.data.hex()])
            csvfile.flush()

            if msg.arbitration_id == control_id and msg.data == control_data:
                print(f"[Logger] Control frame detected. Switching channel.")
                bus.shutdown()
                return

def main():
    config = load_config()
    current_channel = 1  # start przeciwlegle do sendera

    while True:
        log_messages(current_channel, config)
        current_channel = 0 if current_channel == 1 else 1
        print(f"[Logger] Switching to channel {current_channel}")
        time.sleep(2)

if __name__ == "__main__":
    main()
