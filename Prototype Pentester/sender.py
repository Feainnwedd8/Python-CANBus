import can
import time
import os
import json

CONFIG_FILE = "shared_config.json"
TERMINATE_FILE = "terminate_logger.flag"

def load_config():
    with open(CONFIG_FILE, "r") as f:
        return json.load(f)

def send_frames_on_channel(channel_index, config):
    bitrate = config["bitrate"][str(channel_index)]
    priorities = config["priorities"]
    num_frames = config["num_frames"]
    interval = config["frame_interval_ms"]
    control_id = config["control_frame_id"]
    control_data = bytes(config["control_frame_data"])

    bus = can.Bus(interface='vector', channel=channel_index, bitrate=bitrate)
    print(f"[Sender] Sending on channel {channel_index} with bitrate {bitrate}")

    for prio in priorities:
        base_id = prio << 26  # np. 0x18 -> 0x18000000
        for i in range(num_frames):
            arb_id = base_id + i  # inkrementacja od XX000000
            if arb_id > (base_id | 0xFFFFFF):
                print(f"[Sender] ID przekroczyło zakres dla priorytetu {hex(prio)} – przerwanie.")
                break
            msg = can.Message(arbitration_id=arb_id,
                              data=[i % 256] * 8,
                              is_extended_id=True)
            bus.send(msg)
            print(f"[Sender] Sent: ID={hex(arb_id)}")
            time.sleep(interval / 1000.0)

    end_msg = can.Message(arbitration_id=control_id,
                          data=control_data,
                          is_extended_id=True)
    bus.send(end_msg)
    print(f"[Sender] Sent END frame: ID={hex(control_id)}")
    bus.shutdown()

def main():
    config = load_config()
    for channel in [0, 1]:
        send_frames_on_channel(channel, config)
        if channel == 0:
            print("[Sender] Waiting 20s before switching to channel 1...")
            time.sleep(20)

    with open(TERMINATE_FILE, "w") as f:
        f.write("terminate logger")

    print("[Sender] Sent termination signal. Waiting 30s before cleanup...")
    time.sleep(30)
    if os.path.exists(TERMINATE_FILE):
        os.remove(TERMINATE_FILE)
        print("[Sender] Termination file removed.")

if __name__ == "__main__":
    main()
