import subprocess
import time
import can
import json
import sys
import os
from can.interface import Bus
from can.interfaces.vector import VectorBus

CONFIG_FILE = "test_config.json"

def load_config(path):
    with open(path, 'r') as f:
        return json.load(f)

def stop_test():
    subprocess.run(["python", "killer.py"])

def test_channel(interface, channel, bitrate, label):
    try:
        if interface == "vector":
            VectorBus.get_application_config(app_name='python-can', app_channel=channel)
        test_bus = Bus(interface=interface, channel=channel, bitrate=bitrate)
        print(f"[sender] Kanał {channel} ({label}) jest dostępny.")
        test_bus.shutdown()
        return True
    except Exception as e:
        print(f"[sender] Brak dostępu do kanału {channel} ({label}): {e}")
        return False

def switcher(channel):
    try:
        bus = Bus(interface='vector', channel=channel, bitrate=500000)
    except Exception as e:
        print(f"[sender] Błąd przy otwieraniu interfejsu (switcher) na kanale {channel}: {e}")
        return

    msg = can.Message(
        arbitration_id=0x18F0010B,
        dlc=8,
        data=[2, 1, 3, 7, 2, 1, 3, 7],
        is_extended_id=True
    )
    try:
        bus.send(msg)
        print(f"[sender] Switching channel z {channel} na {1 - channel}")
        bus.shutdown()
        time.sleep(10)
    except can.CanError as e:
        print(f"[sender] Błąd podczas wysyłania ramki switch: {e}")

def frame_sender(f_interface, f_channel, f_bitrate, f_prio, ramki, delay):
    try:
        bus = Bus(interface=f_interface, channel=f_channel, bitrate=f_bitrate)
    except Exception as e:
        print(f"[sender] Błąd przy otwieraniu interfejsu {f_interface} kanał {f_channel}: {e}")
        return

    print(f"[sender] Sending CAN frames at priority {hex(f_prio)} on channel {f_channel}")
    end_id = f_prio + 0x00FFFFFF
    while f_prio <= end_id:
        for i in range(ramki):
            msg = can.Message(
                arbitration_id=f_prio + i,
                data=[0, 0, 0, 0, 0, 0, 0, 0],
                is_extended_id=True,
                dlc=8,
                is_rx=False
            )
            try:
                bus.send(msg)
                print(f"[sender] Wysłano ramkę: {hex(f_prio + i)}")
            except (can.CanError, OSError) as e:
                print(f"[sender] Utracono połączenie z interfejsem: {e}")
                bus.shutdown()
                return
        f_prio += ramki
        time.sleep(delay)
    bus.shutdown()

def pentester(config):
    prio_list = config["priolist"]
    ramki = config["ramki"]
    delay = config["delay"]
    start_channel = config["start_channel"]
    bitrate1 = config["bitrate1"]
    bitrate2 = config["bitrate2"]

    if not test_channel("vector", start_channel, bitrate1, "startowy"):
        return

    print("[sender] Start of the test sequence")
    for prio in prio_list:
        frame_sender('vector', start_channel, bitrate1, prio, ramki, delay)

    time.sleep(5)
    switcher(start_channel)
    time.sleep(10)

    print("\n[sender] Start of the test sequence after switching")
    for prio in prio_list:
        frame_sender('vector', 1 - start_channel, bitrate2, prio, ramki, delay)

    time.sleep(10)
    stop_test()

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("[sender] Podaj ścieżkę do pliku konfiguracyjnego jako argument.")
        sys.exit(1)
    config = load_config(sys.argv[1])
    pentester(config)
