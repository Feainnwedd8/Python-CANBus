from time import sleep

import can
import signal
import csv
import time

# Ustawienia dla interfejsu Vector
initial_channel = 1  # Początkowy kanał do odczytu
bitrate1 = 250000  # Ustaw bitrate na 250 kbps
bitrate2 = 250000
# Inicjalizacja interfejsu CAN
bus = can.interface.Bus(channel=initial_channel, interface='vector', bitrate=bitrate1)

# Flaga do kontrolowania działania programu
running = True

# Flaga, czy zmieniliśmy plik CSV na CAN2 i kanał na 0
switched_file = False

# Otwórz początkowy plik CSV do zapisu CAN1
csv_file = open('CAN1.csv', mode='w', newline='')
writer = csv.writer(csv_file)  # Użyj csv.writer do prostszego zapisu

def on_message_received(message):
    global running
    global bus
    global csv_file
    global writer
    global switched_file

    can_id = hex(message.arbitration_id)
    print(can_id)  # Wyświetl tylko ID ramki

    # Zapisz ID ramki do aktualnego pliku CSV
    writer.writerow([can_id])

    # Sprawdzenie warunków na ramkę
    if (not switched_file) and message.arbitration_id == 0x8 and len(message.data) >= 4:
        if message.data[0] == 2 and message.data[1] == 1 and message.data[2] == 3 and message.data[3] == 7:
            print("Warunki spełnione: zamykam CAN1.csv, otwieram CAN2.csv i zmieniam kanał na 0, przerywamy obserwację kanału 1...")
            time.sleep(20)
            # Zamknij plik CAN1
            csv_file.close()

            # Otwórz nowy plik CAN2.csv i ustaw writer
            csv_file = open('CAN2.csv', mode='w', newline='')
            writer = csv.writer(csv_file)

            switched_file = True  # oznacz że zmieniliśmy plik i kanał

            # Zamknij obecny bus
            bus.shutdown()
            # Utwórz nowy bus tylko na kanale 0 (zapominamy o kanale 1)
            bus = can.interface.Bus(channel=0, interface='vector', bitrate=bitrate2)

def signal_handler(sig, frame):
    global running
    running = False
    print("Zatrzymywanie programu...")

signal.signal(signal.SIGINT, signal_handler)

print("Rozpoczęto odczyt ramek CAN...")

try:
    while running:
        message = bus.recv(timeout=0.1)
        if message is not None:
            on_message_received(message)
except Exception as e:
    print(f"Błąd: {e}")
finally:
    bus.shutdown()
    # Zamknij aktualny plik CSV przed zakończeniem
    try:
        csv_file.close()
    except Exception:
        pass
    print("Program zakończony.")
