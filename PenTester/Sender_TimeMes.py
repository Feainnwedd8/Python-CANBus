from email.policy import default

import can
import time

# Ustawienia dla interfejsu Vector
channel_send = 0  # Numer kanału do wysyłania
bitrate = 250000   # Ustaw bitrate na 500 kbps

ramki = 15

# Inicjalizacja interfejsu CAN do wysyłania
bus_send = can.interface.Bus(channel=channel_send, interface='vector', bitrate=bitrate)


def send_can_frames(start_id):
    end_id = start_id + 0x00FFFFFF
    while start_id <= end_id:
        for i in range(ramki):
            message_to_send = can.Message(arbitration_id=start_id + i, data=[], is_extended_id=True)
            try:
                bus_send.send(message_to_send)
                print(f"Wysłano ramkę: {hex(start_id + i)}")
            except can.CanError:
                print("Błąd podczas wysyłania ramki.")
        start_id += ramki
        time.sleep(0.005)

if __name__ == "__main__":
    overall_start_time = time.perf_counter()  # Zapisz czas na początku programu
    send_can_frames(0x0C000000) #zadefiniowanie startowego priorytetu pod PenTest
    send_can_frames(0x18000000)
    send_can_frames(0x1C000000)
    overall_end_time = time.perf_counter()  # Zapisz czas po zakończeniu programu
    elapsed_time = overall_end_time - overall_start_time  # Oblicz czas trwania
    print(f"Czas wykonania całego programu: {elapsed_time:.6f} sekundy")
    bus_send.shutdown()

    