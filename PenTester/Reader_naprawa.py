import can
import signal
import csv
import time
import sys
import os

# -------------------------------
# Konfiguracja
# -------------------------------
initial_channel = 1         # kanał startowy  ZMIENIC PO POLTESCIE
secondary_channel = 0       # kanał po przełączeniu
preferred_bitrate = 500000  # bitrate CAN
running = True
switched_file = False

# -------------------------------
# Inicjalizacja kanału
# -------------------------------
print(f"Próba otwarcia kanału Vector {initial_channel} przy bitrate {preferred_bitrate}...")

try:
    bus = can.interface.Bus(
        channel=initial_channel,
        interface='vector',
        bitrate=preferred_bitrate,
        receive_own_messages=False
    )
    print(f"Połączono z kanałem {initial_channel} przy bitrate {preferred_bitrate}")
except can.CanInitializationError as e:
    print(f"Nie mogę ustawić bitrate {preferred_bitrate}. Powód: {e}")
    print("Próbuję połączyć się w trybie pasywnym...")
    bus = can.interface.Bus(
        channel=initial_channel,
        interface='vector',
        bitrate=None,
        receive_own_messages=False
    )
    print(f"Połączono z kanałem {initial_channel} przy aktywnym bitrate.")

# -------------------------------
# Plik CSV
# -------------------------------
csv_file = open("CAN1.csv", mode='w', newline='')
writer = csv.writer(csv_file)
writer.writerow(["CAN_ID"])  # nagłówek

# -------------------------------
# Obsługa odebranych ramek
# -------------------------------
def on_message_received(message):
    global csv_file, writer

    if message.arbitration_id <= 0x7FF:
        return  # pomiń standardowe ID

    can_id = f"{message.arbitration_id:08X}x"
    print(can_id)
    writer.writerow([can_id])

# -------------------------------
# Obsługa Ctrl+C
# -------------------------------
def signal_handler(sig, frame):
    global running
    print("Zatrzymywanie programu...")
    running = False
    bus.shutdown()

signal.signal(signal.SIGINT, signal_handler)

# -------------------------------
# Pętla główna
# -------------------------------
print("Rozpoczęto odczyt ramek CAN...")

try:
    while running:
        # Obsługa pliku kill_signal.txt
        if os.path.exists('kill_signal.txt'):
            print("Otrzymano sygnał do zamknięcia programu.")
            running = False

        # Obsługa pliku switch_signal.txt
        if not switched_file and os.path.exists('switch_signal.txt'):
            print("Otrzymano sygnał do przełączenia kanału. Przełączanie...")

            # Zamknięcie pierwszego pliku
            csv_file.close()

            # Otwórz drugi plik
            csv_file = open("CAN2.csv", mode='w', newline='')
            writer = csv.writer(csv_file)
            writer.writerow(["CAN_ID"])

            # Zamknięcie kanału i przełączenie
            bus.shutdown()
            try:
                bus = can.interface.Bus(
                    channel=secondary_channel,
                    interface='vector',
                    bitrate=preferred_bitrate,
                    receive_own_messages=False
                )
            except can.CanInitializationError:
                bus = can.interface.Bus(
                    channel=secondary_channel,
                    interface='vector',
                    bitrate=None,
                    receive_own_messages=False
                )

            switched_file = True
            os.remove('switch_signal.txt')
            print("Przełączono na kanał 0 i CAN2.csv.")

        # Odbiór ramek CAN
        message = bus.recv(timeout=0.1)
        if message:
            on_message_received(message)

except Exception as e:
    print(f"Błąd: {e}")
finally:
    try:
        bus.shutdown()
    except Exception:
        pass
    try:
        csv_file.close()
    except Exception:
        pass
    if os.path.exists('kill_signal.txt'):
        os.remove('kill_signal.txt')
    print("Program zakończony.")
