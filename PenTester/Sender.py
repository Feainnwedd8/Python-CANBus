import can
import time

# Vector settings
channel_send = 0  # first channel number
bitrate1 = 250000   # bitrate 250 kbps
bitrate2 = 250000   # in case of second channel in different bitrate
ramki = 15
bus_send = can.interface.Bus(channel=channel_send, interface='vector', bitrate=bitrate1)

def sender(id1, id2, id3, gbitrate1, gbitrate2):
    # sending three ranges of IDs
    send_can_frames(id1, gbitrate1, 0)
    send_can_frames(id2, gbitrate1, 0)
    send_can_frames(id3, gbitrate1, 0)
    time.sleep(30)

    send_extended_frame(0x8, [2, 1, 3, 7]) #switch channel
    time.sleep(30)

    # resending three ranges of IDs after switching channels
    send_can_frames(id1, gbitrate2, 1)
    send_can_frames(id2, gbitrate2, 1)
    send_can_frames(id3, gbitrate2, 1)
    time.sleep(30)

def send_can_frames(start_id, fbitrate, fchannel):
    bus_send = can.interface.Bus(channel=fchannel, interface='vector', bitrate=fbitrate)
    end_id = start_id + 0x00FFFFFF
    while start_id <= end_id:
        for i in range(ramki):
            message_to_send = can.Message(arbitration_id=start_id + i, data=[], is_extended_id=True)
            try:
                bus_send.send(message_to_send)
                # print(f"Wysłano ramkę: {hex(start_id + i)}") # debug only
            except can.CanError:
                print("Błąd podczas wysyłania ramki.")
        start_id += ramki
        time.sleep(0.005)
    bus_send.shutdown()

def send_extended_frame(arbitration_id, data):
    message_to_send = can.Message(arbitration_id=arbitration_id, data=data, is_extended_id=True)
    try:
        bus_send.send(message_to_send)
        print(f"Wysłano ramkę z extended ID: {hex(arbitration_id)} z danymi: {data}")
    except can.CanError:
        print("Błąd podczas wysyłania ramki.")

if __name__ == "__main__":
    sender(0x0C000000, 0x18000000, 0x1C000000, bitrate1, bitrate2)
    print("Koniec")
    bus_send.shutdown()
