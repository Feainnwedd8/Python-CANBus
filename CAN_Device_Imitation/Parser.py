import cantools

class Signal:
    def __init__(self, name, start_bit, length, is_signed, factor, offset):
        self.name = name
        self.start_bit = start_bit
        self.length = length
        self.is_signed = is_signed
        self.factor = factor
        self.offset = offset

    def __repr__(self):
        return (f"Signal('{self.name}', start_bit={self.start_bit}, length={self.length}, "
                f"is_signed={self.is_signed}, factor={self.factor}, offset={self.offset})")

class FrameDefinition:
    def __init__(self, frame_id, signals):
        self.frame_id = frame_id
        self.signals = signals

    def __repr__(self):
        return (f"FrameDefinition(\n"
                f"        frame_id=0x{self.frame_id:X},\n"
                f"        signals=[\n            " +
                ",\n            ".join(repr(sig) for sig in self.signals) +
                "\n        ]\n    )")

# === ZMIEŃ TO NA SWÓJ PLIK DBC ===
DBC_FILE = r'C:\Users\sobkowiak_k\Desktop\Zadania\Stanowisko Testowe\Python_CANBus\Python-CANBus\CAN_Device_Imitation\j1939_2024.dbc'

# Wczytaj DBC
db = cantools.database.load_file(DBC_FILE, strict=False)

DEVICE_DEFINITIONS = {}
FRAME_NAME_TO_ID = {}

for message in db.messages:
    signals = [
        Signal(
            name=signal.name,
            start_bit=signal.start,
            length=signal.length,
            is_signed=signal.is_signed,
            factor=signal.scale,
            offset=signal.offset
        )
        for signal in message.signals
    ]

    frame_def = FrameDefinition(frame_id=message.frame_id, signals=signals)
    DEVICE_DEFINITIONS[message.frame_id] = frame_def
    FRAME_NAME_TO_ID[message.name] = message.frame_id

# === Eksportuj do device_definitions.py ===
with open("device_definitions.py", "w") as f:
    f.write("# Autogenerated from DBC\n\n")

    f.write("class Signal:\n")
    f.write("    def __init__(self, name, start_bit, length, is_signed, factor, offset):\n")
    f.write("        self.name = name\n")
    f.write("        self.start_bit = start_bit\n")
    f.write("        self.length = length\n")
    f.write("        self.is_signed = is_signed\n")
    f.write("        self.factor = factor\n")
    f.write("        self.offset = offset\n\n")
    f.write("    def __repr__(self):\n")
    f.write("        return (f\"Signal('{self.name}', start_bit={self.start_bit}, length={self.length}, \"\n")
    f.write("                f\"is_signed={self.is_signed}, factor={self.factor}, offset={self.offset})\")\n\n")

    f.write("class FrameDefinition:\n")
    f.write("    def __init__(self, frame_id, signals):\n")
    f.write("        self.frame_id = frame_id\n")
    f.write("        self.signals = signals\n\n")
    f.write("    def __repr__(self):\n")
    f.write("        return (f\"FrameDefinition(\\n\"\n")
    f.write("                f\"        frame_id=0x{self.frame_id:X},\\n\"\n")
    f.write("                f\"        signals=[\\n            \" + \",\\n            \".join(repr(sig) for sig in self.signals) + \"\\n        ]\\n    )\")\n\n")

    f.write("DEVICE_DEFINITIONS = {\n")
    for frame_id, frame in DEVICE_DEFINITIONS.items():
        f.write(f"    0x{frame_id:X}: {repr(frame)},\n")
    f.write("}\n\n")

    f.write("FRAME_NAME_TO_ID = {\n")
    for name, frame_id in FRAME_NAME_TO_ID.items():
        f.write(f"    '{name}': 0x{frame_id:X},\n")
    f.write("}\n")
